@using WebMatrix.WebData;
@{


    if (IsPost)
    {
        // variable voor inloggen
        string UserName = Request["Loginname"];
        string Password = Request["password"];
        Validation.RequireFields("Loginname", "password");
        Validation.Add("Password", Validator.StringLength(16, 6));
        string returnurl = Request["returnurl"];
        if (returnurl.IsEmpty())
        {
            returnurl = Href("~/Members/AccountPage");
        }
        // validatie voor inloggen
        if (Validation.IsValid())
        {
            if (WebSecurity.UserExists(UserName) && WebSecurity.GetPasswordFailuresSinceLastSuccess(UserName) >= 4 && WebSecurity.GetLastPasswordFailureDate(UserName).AddMinutes(2) > DateTime.UtcNow)
            {
                Response.Redirect("~/account/AccountLockedOut");
            }
            if (WebSecurity.IsConfirmed(UserName))
            {
                if (WebSecurity.Login(UserName, Password))
                {
                    Context.RedirectLocal(returnurl);
                }
                else
                {
                    Validation.AddFormError("Incorrect username or password");
                }
            }
            else
            {
                Validation.AddFormError("User does not exist or account is not confirmed");
            }
        }
    }


}
<!DOCTYPE html>
<html lang="en">

<body>
    <!-- Render Shared Header-->
    @RenderPage("~/Shared/_Header.cshtml")

    <!-- Page Layout here -->
    <!--Login Form-->

    <div class="row">
        <form method="post">
            @AntiForgery.GetHtml()
            @Html.ValidationSummary(true)
            <div class="row">
                <div class="input-field col l6 m6 s12">
                    <input id="Loginname" type="text" class="validate" name="Loginname">
                    <label for="Loginname">Loginname</label>
                </div>
            </div>
            <div class="row">
                <div class="input-field col l6 m6 s12">
                    <input id="password" type="password" class="validate" name="password">
                    <label for="password">Password</label>
                </div>
            </div>
            <button class="btn waves-effect waves-light red " type="submit" name="action">
                Login
                <i class="material-icons login"></i>
            </button>
        </form>
    </div>

    <!--Side NAV for Users-->
    <!--authentiseerde gebruikers hebben andere opties dan normale gebruikers-->
    <ul id="slide-out" class="side-nav">
        <li>
            <a class="waves-effect" href="~/index.cshtml">Home <i class="material-icons">home</i></a>
        </li> @{if (WebSecurity.IsAuthenticated == false)
            {
                <li>
                    <div class="divider"></div>
                </li>
                <li>
                    <a class="waves-effect" href="~/Account/SignIn.cshtml">Signin</a>
                </li>
            }
            else
            {
                <li>
                    <a class="waves-effect" href="~/Account/Logout.cshtml">Logout <i class="material-icons">Logout</i></a>
                </li>
                <li>
                    <a class="waves-effect" href="~/Members/AccountPage.cshtml">Account <i class="material-icons">face</i></a>
                </li>

            }
        }
    </ul>

    @RenderPage("~/Shared/_Footer.cshtml")



</body>
</html>